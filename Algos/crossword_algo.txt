Note that a subgrid, as used in the algorithm, is a section of the grid space whose upper left square is the first letter of both its horizontal and vertical words; the subgrid then extends to all squares which are part of words which intersect either the horizontal or vertical word starting from the initial position.
 

Initialization: Set all the squares in the grid to their unconstrained state, that is all character values are possible.  (For solving purposes, this is A-Z; for generation, A-Z plus a stop indicator, such as NUL.)
Repeat the following for each subgrid:
    For each of the possible character values of the initial (upper left) position, get all words from the word list which begin with the given character, and which satisfy the length constraints for the down and across words, respectively.  If there is not at least one word which satisfies the length and initial letter constraints for each of the two words (that is, there must be at least one valid across word and one valid down word), move to the next character value.  Otherwise:
 "Write in" each of the words which were determined to meet the across criteria into the grid, moving righward from the initial cell as you go.  For each character written, maintain a reference to what word caused it to be written in.
If at any point a letter cannot be written into a cell because it is no longer a possible value for the cell, remove the current word from the grid and proceed to the next word.
Repeat the above two steps for the down words, starting from the initial position and moving downward.
Move to the cell to the right of the initial position.  For each character in the list of possible values, find all words which meet the length and initial letter constraints (i.e. start with the correct letter and are the proper length).  Call this list words.
If words is empty, delete the current character from the list of possible values.  Propagate the deletion backwards and forwards in the grid by removing the word which caused the deleted character to be written in.  Repeat as necessary; if a cell ever loses all of its possible values, terminate the algorithm and return FAIL.
"Write in" each of the words, as above.  If a letter must be written into a cell for which it is not a possible value, remove the current word and propagate the changes.
Repeat the above step for each row of the grid, for the length of the initial down word.  This should completely traverse the subgrid.
   When all subgrids have been filled in, the grid should contain a representation of all possible solutions.  Output either one or all possible solutions using one of any number  of algorithms for enumerating the solutions.  (The grid consists of a collapsed tree of possible solutions, with each cell representing all the possible values for that cell.)
