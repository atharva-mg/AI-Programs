Algorithm
1: Firstly, Place the starting node into OPEN and find its f (n) value.

2: Then remove the node from OPEN, having the smallest f (n) value. If it is a goal node, then stop and return to success.

3: Else remove the node from OPEN, and find all its successors.

4: Find the f (n) value of all the successors, place them into OPEN, and place the removed node into CLOSE.

5: Goto Step-2.

6: Exit.


Algorithm:
Make an open list containing starting node
If it reaches the destination node :
Make a closed empty list 
If it does not reach the destination node, then consider a node with the lowest f-score in the open list
We are finished

Else :
Put the current node in the list and check its neighbors

For each neighbor of the current node :
If the neighbor has a lower g value than the current node and is in the closed list:
Replace neighbor with this new node as the neighbor’s parent

Else If (current g is lower and neighbor is in the open list):
Replace neighbor with the lower g value and change the neighbor’s parent to the current node.

Else If the neighbor is not in both lists:
Add it to the open list and set its g

Pseudocode:

1 Put node_start in the OPEN list with f(node_start) = h(node_start) (initialization)
2 while the OPEN list is not empty {
3 Take from the open list the node node_current with the lowest
4 f(node_current) = g(node_current) + h(node_current)
5 if node_current is node_goal we have found the solution; break
6 Generate each state node_successor that come after node_current
7 for each node_successor of node_current {
8 Set successor_current_cost = g(node_current) + w(node_current, node_successor)
9 if node_successor is in the OPEN list {
10 if g(node_successor) ≤ successor_current_cost continue (to line 20)
11 } else if node_successor is in the CLOSED list {
12 if g(node_successor) ≤ successor_current_cost continue (to line 20)
13 Move node_successor from the CLOSED list to the OPEN list
14 } else {
15 Add node_successor to the OPEN list
16 Set h(node_successor) to be the heuristic distance to node_goal
17 }
18 Set g(node_successor) = successor_current_cost
19 Set the parent of node_successor to node_current
20 }
21 Add node_current to the CLOSED list
22 }
23 if(node_current != node_goal) exit with error (the OPEN list is empty)
